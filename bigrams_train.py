# Example Feature Extraction from XML Files
# We count the number of specific system calls made by the programs, and use
# these as our features.

# This code requires that the unzipped training set is in a folder called "train". 

import os
from collections import Counter
try:
    import xml.etree.cElementTree as ET
except ImportError:
    import xml.etree.ElementTree as ET
import numpy as np
from scipy import sparse
import pickle
import pandas as pd

import util

TRAIN_DIR = "train"


def create_data_matrix(start_index, end_index, direc="train"):
    X = None
    classes = []
    ids = [] 
    i = -1
    for datafile in os.listdir(direc):
        if datafile == '.DS_Store':
            continue

        i += 1
        if i < start_index:
            continue 
        if i >= end_index:
            break

        # extract id and true class (if available) from filename
        id_str, clazz = datafile.split('.')[:2]
        ids.append(id_str)
        # add target class if this is training data
        try:
            classes.append(util.malware_classes.index(clazz))

        except ValueError:
            # we should only fail to find the label in our list of malware classes
            # if this is test data, which always has an "X" label
            assert clazz == "X"
            classes.append(-1)

        # parse file as an xml document
        tree = ET.parse(os.path.join(direc,datafile))
        this_row = call_feats(tree)
        if X is None:
            X = this_row 
        else:
            X = np.vstack((X, this_row))

    return X, np.array(classes), ids

def call_feats(tree):
    all_bigrams = np.loadtxt('bigrams.txt', dtype='string' )
    bigram_count = {}

    last=False
    for el in tree.iter():
        if el.tag == "all_section":
            for child in el:
                if last:
                    bigram=last+"_"+child.tag
                    if bigram not in bigram_count:
                        bigram_count[bigram] = 1
                    else:
                        bigram_count[bigram] += 1
                last= child.tag
                
    bigram_array = np.zeros(len(all_bigrams))
    for i in range(len(all_bigrams)):
        call = all_bigrams[i]
        bigram_array[i] = 0
        if call in bigram_count:
            bigram_array[i] = bigram_count[call]

    return bigram_array

## Feature extraction
def main():
    X_train, t_train, train_ids = create_data_matrix(0, 4000, TRAIN_DIR)
    #np.savetxt('calls.txt', np.array(list(call_set)), fmt="%s")

    df = pd.DataFrame(X_train)
    df['id'] = train_ids
    df['response'] = t_train
    print df.shape
    df.to_csv("train_bigram_feat.csv")
    # From here, you can train models (eg by importing sklearn and inputting X_train, t_train).

if __name__ == "__main__":
    main()
    